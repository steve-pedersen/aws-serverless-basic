module.exports = {
  env: {
    es6: true,
    node: true,
    browser: true,
  },
  extends: ['eslint:recommended', 'prettier', 'airbnb'],
  parserOptions: {
    ecmaVersion: 7,
    // sourceType: 'module',
    // ecmaFeatures: {
    //   jsx: false,
    //   modules: true,
    //   experimentalObjectRestSpread: true,
    // },
  },
  parser: '@babel/eslint-parser',
  globals: {
    fetch: false,
    window: true,
    navigator: true,
    localStorage: true,
    document: true,
    alert: true,
    File: true,
    Blob: true,
    FileReader: true,
    FormData: true,
  },
  plugins: ['@babel', 'prettier', 'sort-imports-es6-autofix', 'unused-imports'],
  rules: {
    'sort-imports-es6-autofix/sort-imports-es6': 1,
    // 'jest/no-disabled-tests': 'warn',
    // 'jest/no-focused-tests': 'error',
    // 'jest/no-identical-title': 'error',
    // 'jest/prefer-to-have-length': 'warn',
    // 'jest/valid-expect': 'error',
    'prettier/prettier': [
      'error',
      {
        printWidth: 120,
        singleQuote: true,
        trailingComma: 'es5',
      },
    ],
    'linebreak-style': ['error', 'unix'],
    quotes: [
      'error',
      'single',
      {
        allowTemplateLiterals: true,
      },
    ],
    semi: ['error', 'always'],
    'semi-spacing': 'error',
    curly: ['error', 'multi-line'],
    // "switch-colon-spacing": ["error", {"after": true, "before": false}],
    'max-len': [
      'off',
      {
        code: 120,
        ignoreUrls: true,
      },
    ],
    'no-var': 'error',
    'no-unused-vars': [
      'off',
      {
        args: 'none',
      },
    ],
    'unused-imports/no-unused-imports': 'error',
    'unused-imports/no-unused-vars': [
      'warn',
      {
        vars: 'all',
        varsIgnorePattern: '^_',
        args: 'after-used',
        argsIgnorePattern: '^_',
      },
    ],
    'prefer-const': 'error',
    'valid-jsdoc': [
      'off',
      {
        requireParamDescription: false,
        requireReturnDescription: false,
        requireReturn: false,
        prefer: {
          returns: 'return',
        },
      },
    ],
    'no-array-constructor': 'error',
    // 'comma-dangle': ['error', 'always-multiline'],
    'no-new-wrappers': 'error',
    'no-new-object': 'error',
    'quote-props': ['off'],
    'prefer-rest-params': 'error',
    'prefer-spread': 'error',
    'no-throw-literal': 'error',
    'default-case': 'error',
    'class-methods-use-this': 0,
    'no-with': 'error',
    'no-eval': 'error',
    'no-extend-native': 'error',
    'no-extra-bind': 'error',
    'no-invalid-this': 'off',
    'no-multi-spaces': 'error',
    'no-multi-str': 'error',
    'no-useless-escape': 'off',
    'brace-style': 'error',
    camelcase: 'off',
    'eol-last': 'error',
    'func-call-spacing': 'error',
    'key-spacing': 'error',
    'keyword-spacing': 'error',
    'new-cap': 'off',
    'no-multiple-empty-lines': [
      'error',
      {
        max: 2,
      },
    ],
    'no-trailing-spaces': 'error',
    'space-before-blocks': 'error',
    'space-before-function-paren': [
      'error',
      {
        asyncArrow: 'always',
        anonymous: 'never',
        named: 'never',
      },
    ],
    'spaced-comment': ['error', 'always'],
    // 'arrow-parens': ['error', 'as-needed'],
    'rest-spread-spacing': 'error',
    'no-console': 'off',
    // rules for team discussion
    'arrow-body-style': [0, 'as-needed'],
    'no-underscore-dangle': 0,
    'no-unneeded-ternary': 0,
    'import/prefer-default-export': 0,
    'no-mixed-operators': 0,
    'no-lonely-if': 0,
    'no-param-reassign': 0,
    eqeqeq: 0,
    'guard-for-in': 0,
    'no-restricted-syntax': 0,
    'no-plusplus': 0,
    // 'no-plusplus': [2, { 'allowForLoopAfterthoughts': true }],
    'one-var': 0,
    'prefer-destructuring': 1,
    'function-paren-newline': 0,
    'object-curly-spacing': 0,
    'array-callback-return': 0,
    radix: [2, 'as-needed'],
    'dot-notation': 0,
    'object-curly-newline': 0,
    'object-shorthand': 1,
    'import/extensions': 0,
    'import/no-unresolved': 2,
    // TODO: come back to `import/no-cycle`
    // should definitely be marked as "2" for error
    'import/no-cycle': 1,
    'import/first': 0,
    'import/no-duplicates': 0,
    'import/newline-after-import': 0,
    'import/no-extraneous-dependencies': 0,
    'no-use-before-define': 0,
    'space-infix-ops': 0,
    'prefer-template': 0,
    'consistent-return': 0,
    'one-var-declaration-per-line': 0,
    'func-names': 0,
    'padded-blocks': 0,
    'no-else-return': 1,
    'no-shadow': 0,
    'no-continue': 0,
    'no-prototype-builtins': 0,
    'no-return-assign': 0,
    'no-unused-expressions': 0,
    'no-useless-computed-key': 0,
    '@babel/no-invalid-this': 2,
    'template-curly-spacing': 'off',
    indent: 'off',
    'sonarjs/no-duplicate-string': 0,
    'sonarjs/cognitive-complexity': 0,
    'sonarjs/no-identical-functions': 0,
  },
  overrides: [
    {
      files: ['**/*.{ts,tsx}'],
      extends: 'plugin:import/typescript',
      parser: '@typescript-eslint/parser',
      parserOptions: {
        tsconfigRootDir: __dirname,
        project: './tsconfig.json',
      },
      plugins: ['@typescript-eslint', 'typescript-sort-keys', 'import'],
      rules: {
        // '@typescript-eslint/no-explicit-any': 'error',
        '@typescript-eslint/consistent-type-imports': [
          'error',
          {
            prefer: 'no-type-imports',
            disallowTypeAnnotations: false,
          },
        ],
        'import/no-unresolved': 'error',
        'prefer-promise-reject-errors': 'off',
        'array-callback-return': 2,
        eqeqeq: [
          'error',
          'always',
          {
            null: 'ignore',
          },
        ],
        'guard-for-in': 2,
        // 'jest/no-focused-tests': 'warn',
        // 'jest/prefer-to-have-length': 'off',
        'new-cap': 'error',
        'newline-before-return': 'error',
        'no-else-return': 2,
        'no-invalid-this': 'error',
        'no-lonely-if': 2,
        'no-param-reassign': 2,
        'no-plusplus': [
          2,
          {
            allowForLoopAfterthoughts: true,
          },
        ],
        'no-return-assign': 2,
        'no-unneeded-ternary': 2,
        'no-useless-escape': 'error',
        'object-shorthand': 2,
        'padding-line-between-statements': [
          'warn',
          {
            blankLine: 'always',
            prev: '*',
            next: 'block',
          },
          {
            blankLine: 'always',
            prev: 'block',
            next: '*',
          },
          {
            blankLine: 'always',
            prev: '*',
            next: 'block-like',
          },
          {
            blankLine: 'always',
            prev: 'block-like',
            next: '*',
          },
        ],
        'prefer-template': 2,
        'sort-imports-es6-autofix/sort-imports-es6': 'off',
        'typescript-sort-keys/interface': 'error',
        'typescript-sort-keys/string-enum': 'error',
        'unused-imports/no-unused-vars': [
          'error',
          {
            vars: 'all',
            varsIgnorePattern: '^_',
            args: 'after-used',
            argsIgnorePattern: '^_',
          },
        ],
      },
    },
  ],
  settings: {
    'import/resolver': {
      webpack: {
        config: './webpack.config.js',
      },
    },
  },
};
